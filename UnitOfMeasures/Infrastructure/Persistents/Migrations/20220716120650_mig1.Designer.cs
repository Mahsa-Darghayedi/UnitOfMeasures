// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnitOfMeasures.Infrastructure.Persistents.DBContext;

#nullable disable

namespace UnitOfMeasures.Migrations
{
    [DbContext(typeof(MeasureDBContext))]
    [Migration("20220716120650_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UnitOfMeasures.Domain.Models.BaseMeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BaseMeasurementUnitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MeasurementDimensionID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("BaseMeasurementUnitID");

                    b.HasIndex("MeasurementDimensionID")
                        .IsUnique();

                    b.ToTable("BaseMeasurementUnits", (string)null);
                });

            modelBuilder.Entity("UnitOfMeasures.Domain.Models.CoefficientUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CoefficientUnitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BaseMeasuremenID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Ratio")
                        .HasColumnType("real");

                    b.HasKey("Id")
                        .HasName("CoefficientUnitID");

                    b.HasIndex("BaseMeasuremenID");

                    b.ToTable("CoefficientUnits", (string)null);
                });

            modelBuilder.Entity("UnitOfMeasures.Domain.Models.FormulaUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FormulaUnitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BaseMeasuremenID")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ConvertFromBaseFormula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConvertToBaseFormula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("FormulaUnitID");

                    b.ToTable("FormulaUnits", (string)null);
                });

            modelBuilder.Entity("UnitOfMeasures.Domain.Models.MeasurementDimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MeasurementDimensionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("MeasurementDimensionID");

                    b.ToTable("MeasurementDimensions", (string)null);
                });

            modelBuilder.Entity("UnitOfMeasures.Domain.Models.BaseMeasurementUnit", b =>
                {
                    b.HasOne("UnitOfMeasures.Domain.Models.MeasurementDimension", "MeasurementDimension")
                        .WithMany("BaseMeasurementUnits")
                        .HasForeignKey("MeasurementDimensionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementDimension");
                });

            modelBuilder.Entity("UnitOfMeasures.Domain.Models.CoefficientUnit", b =>
                {
                    b.HasOne("UnitOfMeasures.Domain.Models.BaseMeasurementUnit", "BaseMeasurementUnit")
                        .WithMany("CoefficientUnits")
                        .HasForeignKey("BaseMeasuremenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseMeasurementUnit");
                });

            modelBuilder.Entity("UnitOfMeasures.Domain.Models.BaseMeasurementUnit", b =>
                {
                    b.Navigation("CoefficientUnits");
                });

            modelBuilder.Entity("UnitOfMeasures.Domain.Models.MeasurementDimension", b =>
                {
                    b.Navigation("BaseMeasurementUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
